# This is a test playbook for creating an ec2 instance for theyvoteforyou

# Run this like so:
# ansible-playbook -i ec2.py ec2-provisioning-test.yml

# Before running this, however, you will need to set the environment variables
# export AWS_ACCESS_KEY_ID='AK123'
# export AWS_SECRET_ACCESS_KEY='abc123'

# More local requirements:
# `sudo pip install --ignore-installed six boto3`
#

- hosts: localhost
  connection: local
  gather_facts: False

  tasks:

    - name: Set up security group for theyvoteforyou
      ec2_group:
        name: theyvoteforyou
        description: theyvoteforyou security group
        region: 'ap-southeast-2'
        rules:
        - proto: tcp
          ports:
            - 22
            - 80
            - 443
          cidr_ip: 0.0.0.0/0

    - name: Provision a set of instances
      ec2:
        # Sydney
        region: 'ap-southeast-2'
        key_name: test
        group: theyvoteforyou
        instance_type: t2.micro
        # Ubuntu 16.04 in Sydney
        image: "ami-974eb0f5"
        wait: true
        count_tag:
          Name: theyvoteforyou
        exact_count: 1
        instance_tags:
          Name: theyvoteforyou
      register: ec2

    - name: Add all instance public IPs to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - tag_Name_theyvoteforyou
          - ec2
      with_items: "{{ ec2.instances }}"

- hosts: tag_Name_theyvoteforyou
  become: true
  gather_facts: False

  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
    changed_when: False

- hosts: tag_Name_theyvoteforyou
  become: true
  tasks:
    - name: Get all the records for this domain
      dnsmadeeasy:
        account_key: "{{ encrypted_dnsmadeeasy_key }}"
        account_secret: "{{ encrypted_dnsmadeeasy_secret }}"
        domain: "theyvoteforyou.org.au"
        state: present
      register: response
      tags:
        - dns

    # This will currently delete a record and add the same one back. Not
    # what we actually want
    # TODO: Fix this
    - name: Remove any pre-existing A records for ec2
      dnsmadeeasy:
        account_key: "{{ encrypted_dnsmadeeasy_key }}"
        account_secret: "{{ encrypted_dnsmadeeasy_secret }}"
        domain: "theyvoteforyou.org.au"
        state: absent
        record_type: A
        record_name: ec2
        record_value: "{{ item }}"
      with_items: "{{ response | json_query(query) }}"
      vars:
        query: "result[?type=='A'] | [?name=='ec2'].value"
      tags:
        - dns

    # Run this from the machine in question so we easy access to its address
    # Only run this if this is running on an EC2 instance
    # TODO: Move this to the theyvoteforyou role
    - name: Setup DNS for theyvoteforyou EC2 instance
      dnsmadeeasy:
        account_key: "{{ encrypted_dnsmadeeasy_key }}"
        account_secret: "{{ encrypted_dnsmadeeasy_secret }}"
        domain: "theyvoteforyou.org.au"
        record_ttl: 60
        state: present
        record_type: A
        record_name: ec2
        record_value: "{{ inventory_hostname }}"
      tags:
        - dns
    - name: Setup DNS for theyvoteforyou EC2 instance
      dnsmadeeasy:
        account_key: "{{ encrypted_dnsmadeeasy_key }}"
        account_secret: "{{ encrypted_dnsmadeeasy_secret }}"
        domain: "theyvoteforyou.org.au"
        record_ttl: 60
        state: present
        record_type: CNAME
        record_name: "test.ec2"
        record_value: ec2
      tags:
        - dns
  vars_files:
    - encrypted_vars/dnsmadeeasy.yml

# TODO: Don't want to run dns update stuff
- hosts: tag_Name_theyvoteforyou
  become: true
  roles:
    - theyvoteforyou
  vars_files:
    - encrypted_vars/theyvoteforyou.yml

# This needs to run after the two DNS entries for the hosts are added
# It also needs to be run after nginx has been installed
- hosts: tag_Name_theyvoteforyou
  become: true
  vars:
    certbot_auto_renew_user: deploy
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_create_if_missing: yes
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - ec2.theyvoteforyou.org.au
      - email: contact@oaf.org.au
        domains:
          - test.ec2.theyvoteforyou.org.au
  roles:
    - geerlingguy.certbot
