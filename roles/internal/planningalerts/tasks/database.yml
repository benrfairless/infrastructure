# Tasks to create planningalerts database and database users

- name: Install dependency for ansible mysql_db module
  apt:
    pkg: python3-mysqldb

- name: Create planningalerts databases on mysql
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ item }}"
  with_items:
    - production
    - staging

- name: Install dependency for postgresql_db
  apt:
    pkg: python3-psycopg2

- name: Create planningalerts database on postgres
  postgresql_db:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ item }}"
  run_once: true
  with_items:
    - production
    - staging

- name: Create planningalerts user with access to the database (production) on mysql
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-production
    password: "{{ planningalerts_production_mysql_password }}"
    priv: 'pa-production.*:ALL'
    host: "%"

- name: Create planningalerts user with access to the database (staging) on mysql
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-staging
    password: "{{ planningalerts_staging_mysql_password }}"
    priv: 'pa-staging.*:ALL'
    host: "%"

- name: Create planningalerts postgresql role
  postgresql_user:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ item }}"
    name: "pa-{{ item }}"
    password: "{{ (item == 'production') | ternary(planningalerts_production_postgres_password, planningalerts_staging_postgres_password) }}"
    no_password_changes: true
  run_once: true
  with_items:
    - production
    - staging

- name: Give planningalerts roles access to the database
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ item }}"
    roles: "pa-{{ item }}"
    privs: ALL
    type: database
  run_once: true
  with_items:
    - production
    - staging

- name: Give planningalerts roles access to the public schema
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ item }}"
    roles: "pa-{{ item }}"
    privs: ALL
    type: schema
    objs: public
  run_once: true
  with_items:
    - production
    - staging

- name: Create mysql user with readonly access to the production planningalerts database for metabase
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-production-readonly
    password: "{{ planningalerts_production_readonly_mysql_password }}"
    priv: 'pa-production.*:SELECT'
    host: "%"
  run_once: true

# We can't do this from the rails app because on AWS it requires special permissions
# Can't figure out how not to get spatial_ref_sys installed in our database
- name: Add postgis extension to planningalerts database
  community.postgresql.postgresql_ext:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: postgis
    db: "pa-{{ item }}"
  run_once: true
  with_items:
    - production
    - staging
