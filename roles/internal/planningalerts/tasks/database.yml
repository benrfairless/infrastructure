# Tasks to create planningalerts database and database users

# MySQL

- name: Install dependency for ansible mysql_db module
  apt:
    pkg: python3-mysqldb

- name: "Create planningalerts databases on mysql ({{ stage }})"
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ stage }}"

- name: "Create planningalerts user with access to the database on mysql ({{ stage }})"
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ stage }}"
    password: "{{ (stage == 'production') | ternary(mysql_password_production, mysql_password_staging) }}"
    priv: "pa-{{ stage }}.*:ALL"
    host: "%"

- name: Create mysql user with readonly access to the production planningalerts database for metabase
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-production-readonly
    password: "{{ mysql_password_production_readonly }}"
    priv: 'pa-production.*:SELECT'
    host: "%"
  run_once: true

# Postgres

- name: Install dependency for postgresql_db
  apt:
    pkg: python3-psycopg2

- name: "Create planningalerts database on postgres ({{ stage }})"
  postgresql_db:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ stage }}"
  run_once: true

- name: "Create planningalerts postgresql role ({{ stage }})"
  postgresql_user:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ stage }}"
    name: "pa-{{ stage }}"
    password: "{{ (stage == 'production') | ternary(postgres_password_production, postgres_password_staging) }}"
    no_password_changes: true
  run_once: true

- name: "Give planningalerts roles access to the database ({{ stage }})"
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ stage }}"
    roles: "pa-{{ stage }}"
    privs: ALL
    type: database
  run_once: true

- name: "Give planningalerts roles access to the public schema ({{ stage }})"
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ stage }}"
    roles: "pa-{{ stage }}"
    privs: ALL
    type: schema
    objs: public
  run_once: true

- name: Create posgresql user pa-production-readonly for metabase
  postgresql_user:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-production"
    name: "pa-production-readonly"
    password: "{{ postgres_password_production_readonly }}"
    no_password_changes: true

# Note that this gives access to the CURRENT tables in the database. Any new tables won't be included.
# This needs to get run again to include any new tables. I know... very far from ideal.
- name: Give the user pa-production-readonly readonly access to the production planningalerts database
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-production"
    role: "pa-production-readonly"
    privs: SELECT
    objs: ALL_IN_SCHEMA

# We can't do this from the rails app because on AWS it requires special permissions
# Can't figure out how not to get spatial_ref_sys installed in our database
- name: "Add postgis extension to planningalerts database ({{ stage }})"
  community.postgresql.postgresql_ext:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: postgis
    db: "pa-{{ stage }}"
  run_once: true
