---
- name: Remove apache2
  apt:
    name: apache2
    state: absent

- name: Add key for passenger
  apt_key:
    url: http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xAC40B2F7
    state: present

- name: Apt via https
  apt:
    name: apt-transport-https
    state: present

- name: Apt add passenger to list
  apt_repository:
    repo: 'deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ansible_distribution_release}} main'
    state: present
    update_cache: yes

- name: Install nginx
  apt:
    pkg:
      - libnginx-mod-http-passenger
      - nginx
    state: present

- name: Install memcached
  apt:
    pkg: memcached

- name: Install dependency for ansible mysql_db module
  apt:
    pkg: python3-mysqldb
  when: primary | bool

- name: Create planningalerts databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ item }}"
  with_items:
    - production
    - staging
  when: primary | bool

- name: Create planningalerts user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-production
    password: "{{ planningalerts_production_mysql_password }}"
    priv: 'pa-production.*:ALL'
    host: "%"
  when: primary | bool

- name: Create planningalerts user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-staging
    password: "{{ planningalerts_staging_mysql_password }}"
    priv: 'pa-staging.*:ALL'
    host: "%"
  when: primary | bool

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: '{{item}}'
  with_items:
    - /srv/www/production
    - /srv/www/production/shared
    - /srv/www/staging
    - /srv/www/staging/shared

- name: Ensure packages to build gem native extensions are installed
  apt:
    pkg: ['libmysqlclient-dev', 'libxml2-dev', 'libxslt1-dev']

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: /srv/www/{{ item }}/shared/database.yml
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application new relic configuration
  template:
    src: newrelic.yml
    dest: /srv/www/production/shared/
    owner: deploy
    group: deploy
  notify: nginx reload

- name: Copy application environment variables
  template:
    src: "env.{{ item }}"
    # Naming of the file .env.production is a little misleading (in staging environment)
    # Probably should just be called "env" and capistrano will need updating too
    # TODO: Fix this
    dest: "/srv/www/{{ item }}/shared/.env.production"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx restart

- name: Ensure the log directories exist
  file:
    state: directory
    path: "/srv/www/{{ item }}/shared/log"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Ensure the sitemaps directories exist
  file:
    state: directory
    path: "/srv/www/{{ item }}/shared/sitemaps"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Ensure the system directories exist
  file:
    state: directory
    path: "/srv/www/{{ item }}/shared/system"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging

- name: Install nginx now
  apt:
    pkg: nginx
  when: "'ec2' in group_names"

- name: Config to restart passenger every n requests
  copy:
    src: limit-memory-leak.conf
    dest: /etc/nginx/conf.d
  notify: nginx restart

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx site configuration
  template:
    src: default
    dest: /etc/nginx/sites-available/
  notify: nginx reload

- name: Enable site
  file:
    src: /etc/nginx/sites-available/default
    dest: /etc/nginx/sites-enabled/default
    state: link
  notify: nginx reload

- name: Allow deploy user to control services
  copy:
    src: deploy_service_control
    dest: /etc/sudoers.d/
    validate: visudo -cf %s

- name: Set up (or remove) PlanningAlerts daily import and email job
  cron:
    name: planningalerts_import_and_email
    user: deploy
    hour: "12"
    minute: "0"
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake planningalerts:applications:import_and_email RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  when: primary | bool

- name: PlanningAlerts daily XML sitemap generation
  cron:
    name: planningalerts_sitemap
    user: deploy
    hour: "15"
    minute: "0"
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake planningalerts:sitemap RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"

- name: PlanningAlerts daily backup of elasticsearch
  cron:
    name: planningalerts_elasticsearch_snapshot
    user: deploy
    hour: "3"
    minute: "20"
    job: "cd /srv/www/production/current && /usr/local/bin/bundle exec rake planningalerts:elasticsearch_snapshot RAILS_ENV=production"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  when: primary | bool

# TODO: Do we want scraping and email to happen for staging too?

- name: Install postfix so we can mail out from cron jobs
  apt:
    pkg: postfix

# TODO: Make this mail to different addresses for development/production
- name: Mail output of cron
  cronvar:
    name: MAILTO
    user: deploy
    value: web-administrators@openaustralia.org,q8z3f5c7d7g4e7m2@oaf.slack.com
  when: "'ec2' in group_names"

- name: Autoremove unneeded packages
  apt:
    autoremove: yes
