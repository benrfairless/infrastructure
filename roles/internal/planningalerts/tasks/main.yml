---
- name: Remove apache2
  apt:
    name: apache2
    state: absent

- name: Add key for passenger
  apt_key:
    url: http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xAC40B2F7
    state: present

- name: Apt via https
  apt:
    name: apt-transport-https
    state: present

- name: Apt add passenger to list
  apt_repository:
    repo: 'deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ansible_distribution_release}} main'
    state: present
    update_cache: yes

- name: Install nginx
  apt:
    pkg:
      - libnginx-mod-http-passenger
      - nginx
    state: present

- name: Install memcached
  apt:
    pkg: memcached

- name: Make memcached listen to the outside world
  lineinfile:
    path: /etc/memcached.conf
    regexp: "^-l 127.0.0.1"
    line: "-l 0.0.0.0"
  notify:
    - memchached restart

- name: Install dependency for ansible mysql_db module
  apt:
    pkg: python3-mysqldb

- name: Create planningalerts databases on mysql
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ item }}"
  with_items:
    - production
    - staging

- name: Install dependency for postgresql_db
  apt:
    pkg: python3-psycopg2

# TODO: Only need to run this on one of the machines. The other one will likely fail if a change needs to be made
- name: Create planningalerts database on postgres
  postgresql_db:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: "pa-{{ item }}"
  run_once: true
  with_items:
    - production
    - staging

- name: Create planningalerts user with access to the database (production) on mysql
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-production
    password: "{{ planningalerts_production_mysql_password }}"
    priv: 'pa-production.*:ALL'
    host: "%"

- name: Create planningalerts user with access to the database (staging) on mysql
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: pa-staging
    password: "{{ planningalerts_staging_mysql_password }}"
    priv: 'pa-staging.*:ALL'
    host: "%"

- name: Create planningalerts postgresql role
  postgresql_user:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ item }}"
    name: "pa-{{ item }}"
    password: "{{ (item == 'production') | ternary(planningalerts_production_postgres_password, planningalerts_staging_postgres_password) }}"
    no_password_changes: true
  run_once: true
  with_items:
    - production
    - staging

- name: Give planningalerts roles access to the database
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ item }}"
    roles: "pa-{{ item }}"
    privs: ALL
    type: database
  run_once: true
  with_items:
    - production
    - staging

- name: Give planningalerts roles access to the public schema
  postgresql_privs:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    db: "pa-{{ item }}"
    roles: "pa-{{ item }}"
    privs: ALL
    type: schema
    objs: public
  run_once: true
  with_items:
    - production
    - staging

# We can't do this from the rails app because on AWS it requires special permissions
# Can't figure out how not to get spatial_ref_sys installed in our database
- name: Add postgis extension to planningalerts database
  community.postgresql.postgresql_ext:
    login_host: "{{ planningalerts_db_host }}"
    login_user: root
    login_password: "{{ rds_admin_password }}"
    name: postgis
    db: "pa-{{ item }}"
  run_once: true
  with_items:
    - production
    - staging

- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: '{{item}}'
  with_items:
    - /srv/www/production
    - /srv/www/production/shared
    - /srv/www/production/shared/config
    - /srv/www/production/shared/log
    - /srv/www/production/shared/public
    - /srv/www/production/shared/sitemaps
    - /srv/www/production/shared/system
    - /srv/www/staging
    - /srv/www/staging/shared
    - /srv/www/staging/shared/config
    - /srv/www/staging/shared/log
    - /srv/www/staging/shared/public
    - /srv/www/staging/shared/sitemaps
    - /srv/www/staging/shared/system

- name: Ensure packages to build gem native extensions are installed
  apt:
    pkg: ['libmysqlclient-dev', 'libxml2-dev', 'libxslt1-dev']

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: /srv/www/{{ item }}/shared/database.yml
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application database configuration
  template:
    src: "database-{{ item }}.yml"
    dest: /srv/www/{{ item }}/shared/config/database.yml
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx reload

- name: Copy application new relic configuration
  template:
    src: newrelic.yml
    dest: /srv/www/production/shared/
    owner: deploy
    group: deploy
  notify: nginx reload

- name: Copy application new relic configuration
  template:
    src: newrelic.yml
    dest: /srv/www/production/shared/config
    owner: deploy
    group: deploy
  notify: nginx reload

- name: Copy application environment variables
  template:
    src: "env.{{ item }}"
    # Naming of the file .env.production is a little misleading (in staging environment)
    # Probably should just be called "env" and capistrano will need updating too
    # TODO: Fix this
    dest: "/srv/www/{{ item }}/shared/.env.production"
    owner: deploy
    group: deploy
  with_items:
    - production
    - staging
  notify: nginx restart

# This is so that cap 3 deploys will work which check the existence of the file on the other
# end of the symbolic link
- name: Ensure that sitemap.xml exists 
  file:
    path: "/srv/www/{{ item }}/shared/public/sitemap.xml"
    owner: deploy
    group: deploy
    state: touch
  with_items:
    - production
    - staging

- name: Install nginx now
  apt:
    pkg: nginx
  when: "'ec2' in group_names"

- name: Config to restart passenger every n requests
  copy:
    src: limit-memory-leak.conf
    dest: /etc/nginx/conf.d
  notify: nginx restart

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx restart

- name: Copy nginx site configuration
  template:
    src: default
    dest: /etc/nginx/sites-available/
  notify: nginx reload

- name: Enable site
  file:
    src: /etc/nginx/sites-available/default
    dest: /etc/nginx/sites-enabled/default
    state: link
  notify: nginx reload

- name: Allow deploy user to control services
  copy:
    src: deploy_service_control
    dest: /etc/sudoers.d/
    validate: visudo -cf %s

- name: Autoremove unneeded packages
  apt:
    autoremove: yes
