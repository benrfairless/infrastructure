---
- name: Ensure that deploy owns /srv/www and /srv/www/shared
  file:
    state: directory
    owner: deploy
    group: deploy
    path: "{{item}}"
  with_items:
    - /srv/www/production
    - /srv/www/production/shared

# TODO: Extract variable
- name: Set the ruby version for the alaveteli deploy
  copy:
    content: 2.0.0-p598
    dest: /srv/www/production/shared/rbenv-version

# Installing via bash so that rbenv is used. Otherwise would install gems for default system ruby
# TODO When gem is already installed stop it from saying something has changed
- name: Install bundler gem
  command: bash -lc "gem install bundler"
  become: true
  become_user: deploy

# - name: Add mySociety Debian Package Repository key
#   apt_key: url="https://debian.mysociety.org/debian.mysociety.org.gpg.key"
#
# - name: Add mySociety Debian Package Repository
#   apt_repository: repo="deb http://debian.mysociety.org squeeze main"

- name: Add postgresql apt repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
    filename: pgdg

- name: Import postgresql repository signing key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    id: ACCC4CF8

# We're using a slightly older postgres client so that pg_dump still
# works with "-i" which would cause a rails migration to fail otherwise.
# This will be fixed by upgrading to the latest alavetelli.
# TODO: Not sure if postgresql-client-9.5 gets installed somewhere along the way too
- name: Install postgresql-client-9.4
  apt:
    pkg: "{{ item }}"
    update_cache: true
  with_items:
    - postgresql-client-9.4
    - libpq-dev

- name: Install packages required by Alaveteli
  apt: name={{ item }} state=present
  with_items:
    - libicu-dev
    - libmagic-dev
    - libmagickwand-dev
    - xapian-tools
    - uuid-dev
    # TODO: We need to install wkhtmltopdf
    # - wkhtmltopdf-static
    - pdftk

# For some unknown reason on Ubuntu 16.04 Magick-config isn't in the path
# after installing imagemagick above
- name: Put Magick-config in the path
  file:
    state: link
    src: /usr/lib/x86_64-linux-gnu/ImageMagick-6.8.9/bin-Q16/Magick-config
    dest: /usr/local/bin/Magick-config

- name: Install lockfile-progs for run-with-lockfile.sh
  apt: name=lockfile-progs

# TODO: How do we handle production/staging here?
- name: Link run-with-lockfile.sh so it's available system-wide
  file:
    src: "/srv/www/production/current/commonlib/bin/run-with-lockfile.sh"
    dest: "/usr/bin/run-with-lockfile"
    force: true
    state: link

- name: Install dependency for postgresql_db
  apt: pkg=python-psycopg2

- name: Create database
  postgresql_db:
    login_host: "{{ postgresql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: alaveteli

- name: Create posgresql role
  postgresql_user:
    login_host: "{{ postgresql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    db: alaveteli
    name: alaveteli
    password: "{{ db_password }}"
    priv: ALL

- name: Copy over database configuration for application
  template: src=database.yml dest=/srv/www/production/shared/database.yml owner=deploy group=deploy
  notify: nginx restart

- name: Copy init scripts for daemons
  copy:
    dest: /etc/init.d/
    src: "{{ item }}"
    mode: 0755
  with_items:
    - foi-alert-tracks
    - foi-purge-varnish

- name: Generate the overall nginx config
  template: src=nginx.conf dest=/etc/nginx/nginx.conf
  notify: nginx reload

- name: Copy test/test password for staging site
  copy:
    src: htpasswd
    dest: /etc/nginx/
  notify: nginx reload

- name: Copy nginx config for the app
  copy: src=default dest=/etc/nginx/sites-available/ owner=root group=root mode=644
  notify: nginx reload

- name: Copy across the main Alaveteli config
  template: src=general.yml dest=/srv/www/production/shared/ owner=deploy group=deploy
  notify: nginx restart

- import_tasks: certificates.yml
- import_tasks: cron.yml

- name: Add deploy user to adm group so it can read mail logs
  user:
    name: deploy
    groups: adm
    append: yes

# TODO: Send output of cron via email to a sensible place

# TODO: Setup alaveteli service in /etc/init.d?

# TODO: Set up incoming email handling including separate email and server address for staging
