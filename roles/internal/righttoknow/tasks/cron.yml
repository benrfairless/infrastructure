# For local development (under vagrant we don't want the cron jobs generating email)
- cronvar:
    name: MAILTO
    # Also sends to #righttoknow-log slack channel
    value: web-administrators@openaustralia.org,k6g2t1e7e6u1p0f2@oaf.slack.com
    cron_file: "{{ item }}"
  with_items:
    - production
    - staging
  when: "'ec2' in group_names"

- name: Add alaveteli crontab - Alert Tracking
  cron:
    user: deploy
    name: "foi-alert-tracks"
    minute: "0,10,20,30,40,50"
    job: "/bin/bash -l -c '/etc/init.d/foi-alert-tracks-{{ item }} check'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Purge Varnish
  cron:
    user: deploy
    name: "foi-purge-varnish"
    minute: "0,10,20,30,40,50"
    job: "/bin/bash -l -c '/etc/init.d/foi-purge-varnish-{{ item }} check'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab entry
  cron:
    user: deploy
    name: "holidays"
    minute: "0"
    hour: "0"
    day: "1"
    month: "12"
    job: "/bin/bash -l -c '/bin/echo \"A year has passed, please update the bank holidays for the Freedom of Information site, thank you.\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Alert for Comments
  cron:
    user: deploy
    name: "alert-comment-on-request"
    minute: "9"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-comment-on-request ./script/alert-comment-on-request || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Upload the Mail Server Logs
  cron:
    user: deploy
    name: "load-mail-server-logs"
    minute: "31"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./load-mail-server-logs ./script/load-mail-server-logs || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Update Xapian
  cron:
    user: deploy
    name: "update-xapian-index"
    minute: "0,5,10,15,20,25,30,35,40,45,50,55"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./update-xapian-index.lock \"./script/update-xapian-index verbose=true\" >> ./log/update-xapian-index.log || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Delete Old Things
  cron:
    user: deploy
    name: "delete-old-things"
    minute: "23"
    hour: "4"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./delete-old-things ./script/delete-old-things || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Overdue Request Alerts
  cron:
    user: deploy
    name: "alert-overdue-requests"
    minute: "0"
    hour: "6"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-overdue-requests ./script/alert-overdue-requests || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Remind for New Responses
  cron:
    user: deploy
    name: "alert-new-response-reminders"
    minute: "0"
    hour: "7"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-new-response-reminders ./script/alert-new-response-reminders || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Remind for not clarified responses
  cron:
    user: deploy
    name: "alert-not-clarified-request"
    minute: "0"
    hour: "8"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./alert-not-clarified-request ./script/alert-not-clarified-request || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Update Recent Requests
  cron:
    user: deploy
    name: "check-recent-requests-sent"
    minute: "2"
    hour: "4"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./check-recent-requests-sent ./script/check-recent-requests-sent || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab - Stop Responses on old requests
  cron:
    user: deploy
    name: "stop-new-responses-on-old-requests"
    minute: "45"
    hour: "3"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production run-with-lockfile -n ./stop-new-responses-on-old-requests ./script/stop-new-responses-on-old-requests || echo \"stalled?\"'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab entry
  cron:
    user: deploy
    name: "request-creation-graph"
    minute: "43"
    hour: "2"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/request-creation-graph'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging

- name: Add alaveteli crontab entry - Update User Graph
  cron:
    user: deploy
    name: "user-use-graph"
    minute: "48"
    hour: "2"
    job: "/bin/bash -l -c 'cd /srv/www/{{ item }}/current && RAILS_ENV=production ./script/user-use-graph'"
    cron_file: "{{ item }}"
    state: "{{ cron_enabled | ternary('present', 'absent')}}"
  with_items:
    - production
    - staging
