# Create fake let's encrypt directories when in development
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ item }}"
  with_items:
    - "{{ righttoknow_domain }}"
    - "test.{{ righttoknow_domain }}"
  when: "'development' in group_names"

# We need to setup the SSL certificates before we try to configure nginx
# because otherwise nginx will try to look for non-existent certificates
- name: Copy SSL certificates for development
  copy:
    src: "{{ item }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: 0644
  with_items:
    - "{{ righttoknow_domain }}"
    - "test.{{ righttoknow_domain }}"
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx restart

- name: Copy SSL keys for development
  copy:
    src: "{{ item }}.key"
    dest: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
    mode: 0640
  with_items:
    - "{{ righttoknow_domain }}"
    - "test.{{ righttoknow_domain }}"
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: nginx restart

- name: Install varnish now (for the benefit of certbot)
  apt:
    pkg: varnish
  when: "'ec2' in group_names"

# TODO: When (if) we use a newer version of certbot add "--post-hook" to restart nginx after renew
- name: Install certificate using certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew_user: root
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_create_if_missing: yes
    certbot_create_standalone_stop_services:
      - varnish
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - "{{ righttoknow_domain }}"
          - www."{{ righttoknow_domain }}"
      - email: contact@oaf.org.au
        domains:
          - "test.{{ righttoknow_domain }}"
          - "www.test.{{ righttoknow_domain }}"
  when: "'ec2' in group_names"
