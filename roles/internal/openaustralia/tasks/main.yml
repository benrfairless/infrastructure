---
- name: Install dependency for ansible mysql_db module
  apt: pkg=python-mysqldb

- name: Create openaustralia databases
  mysql_db:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: "oa-{{ item }}"
  with_items:
    - production
    - staging

- name: Create openaustralia user with access to the database (production)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: oa-production
    password: "{{ openaustralia_production_mysql_password }}"
    priv: 'oa-production.*:ALL'
    host: "%"

- name: Create openaustralia user with access to the database (staging)
  mysql_user:
    login_host: "{{ mysql_host }}"
    login_user: admin
    login_password: "{{ rds_admin_password }}"
    name: oa-staging
    password: "{{ openaustralia_staging_mysql_password }}"
    priv: 'oa-staging.*:ALL'
    host: "%"

# TODO: Add SSL certificate for:
# openaustralia.org.au
# www.openaustralia.org.au
# openaustralia.org
# www.openaustralia.org

# TODO: Add staging site
- name: Ensure that directories exist
  file: path={{ item }} owner=deploy group=deploy state=directory
  with_items:
    - "/srv/www/log"
    - "/srv/www/releases"
    - "/srv/www/shared/config"
    - "/srv/www/shared/images/mps"
    - "/srv/www/shared/images/mpsL"
    - "/srv/www/shared/searchdb"

# Install php5 on xenial requires a few more jumps than usual
- name: Add repo for installing php5
  apt_repository:
    repo: 'ppa:ondrej/php'

# TODO Extract php-mysql-apache role
- name: Install required packages
  apt:
    name: "{{ item }}"
    update_cache: yes
  with_items:
    - php5.6
    - php5.6-curl
    - php5.6-mysql
    - apache2
    - libapache2-mod-php5.6
    - imagemagick
    - libmagickcore-dev
    - libmagickwand-dev
    - ghostscript
    - libxslt1-dev
    - libxml-twig-perl
    - msmtp
    - libdbi-perl
    - libdbd-mysql-perl
    - php5.6-dev
    - libxapian-dev
    - xapian-tools
    - libsearch-xapian-perl

# Matching the version number of libxapian-dev above
- name: Download xapian bindings source
  get_url:
    url: https://oligarchy.co.uk/xapian/1.2.22/xapian-bindings-1.2.22.tar.xz
    dest: /home/deploy
    owner: deploy
    group: deploy
    checksum: sha256:b15ca7984980a1d2aedd3378648ef5f3889cb39a047bac1522a8e5d04f0a8557

- name: Unpack xapian bindings source
  unarchive:
      src: /home/deploy/xapian-bindings-1.2.22.tar.xz
      dest: /home/deploy
      remote_src: yes
      owner: deploy
      group: deploy

- name: Configure xapian bindings
  command: ./configure --with-php
  args:
    chdir: /home/deploy/xapian-bindings-1.2.22
    creates: /home/deploy/xapian-bindings-1.2.22/Makefile
  become_user: deploy

- name: Compile xapian bindings
  command: make
  args:
    chdir: /home/deploy/xapian-bindings-1.2.22
    creates: /home/deploy/xapian-bindings-1.2.22/php/xapian.la
  become_user: deploy

- name: Install xapian bindings
  command: make install
  args:
    chdir: /home/deploy/xapian-bindings-1.2.22
    creates: /usr/lib/php/20131226/xapian.so
  notify: reload apache

- name: Configure php for xapian bindings
  template:
    src: xapian.ini
    dest: /etc/php/5.6/mods-available
  notify: reload apache

- name: Enable xapian for php
  file:
    state: link
    src: /etc/php/5.6/mods-available/xapian.ini
    dest: /etc/php/5.6/apache2/conf.d/30-xapian.ini
  notify: reload apache

# TODO: It would be cleaner if gems were installed as part of the capistrano install
# Then, we could use the Gemfile rather than duplicating this information here
- name: Install required gems
  gem: name={{ item.name }} version={{ item.version }} user_install=no state=present
  with_items:
    - {name: nokogiri,      version: 1.4.4}
    - {name: mini_portile,  version: 0.6.2}
    - {name: mechanize,     version: 0.9.2}
    - {name: activesupport, version: 3.0.4}
    - {name: builder,       version: 2.1.2}
    - {name: rmagick,       version: 2.15.4}
    - {name: htmlentities,  version: 4.2.1}
    - {name: log4r,         version: 1.1.8}
    - {name: json,          version: 1.8.0}
    - {name: hpricot,       version: 0.6.164}
    - {name: rspec,         version: 2.5.0}
    - {name: rcov,          version: 0.9.9}
    - {name: i18n,          version: 0.5.0}

- name: Enable apache modules
  apache2_module: state=present name={{ item }}
  notify: reload apache
  with_items:
    - expires
    - rewrite

- name: Copy across the php config
  template: src=php.ini dest=/etc/php/5.6/{{ item }}/
  notify: reload apache
  with_items:
    - apache2
    - cli

- name: Copy across the apache config
  template: src=openaustralia.org.au.dev.conf dest=/etc/apache2/sites-available/
  notify: reload apache

- name: Copy across the application config
  template:
    src: general
    dest: /srv/www/shared/
    owner: deploy
    group: deploy
  notify: reload apache

- name: Copy across the parser config
  template:
    src: configuration.yml
    dest: /srv/www/shared/parser_configuration.yml
    owner: deploy
    group: deploy

# TODO: Setup redirects on the default host
- name: Enable virtual host
  file: src="../sites-available/openaustralia.org.au.dev.conf" dest="/etc/apache2/sites-enabled/openaustralia.org.au.dev.conf" state=link
  notify: reload apache

- name: Disable default virtual host
  file: dest="/etc/apache2/sites-enabled/000-default.conf" state=absent
  notify: reload apache

- name: Copy msmtp configuration
  template: src=msmtprc dest=/etc/

# daily update at night for MP data (regmem, data from Public Whip etc.)
- name: Set up cron job for daily update
  cron:
    name: dailyupdate
    user: deploy
    hour: 1
    minute: 37
    job: /srv/www/current/twfy/scripts/dailyupdate
    state: "{{ openaustralia_cron_enabled | ternary('present', 'absent')}}"

# every week early Sunday grab weekly range of data
- name: Set up cron job for weekly update
  cron:
    name: weeklyupdate
    user: deploy
    hour: 4
    minute: 23
    weekday: 0
    job: /srv/www/current/twfy/scripts/weeklyupdate
    state: "{{ openaustralia_cron_enabled | ternary('present', 'absent')}}"

# TODO: not sure of the path here
# Email updates (Going at 10am to give me time to fix things if necessary)
- name: Set up cron job for email alerts
  cron:
    name: alertmailer
    user: deploy
    hour: 10
    minute: 0
    weekday: "1-5"
    job: php -q /srv/www/current/twfy/scripts/alertmailer.php
    state: "{{ openaustralia_cron_enabled | ternary('present', 'absent')}}"

# Morning update (Australian Hansard is supposed to be up by 9am the next working day)
- name: Set up cron job for morning updates
  cron:
    name: morningupdate
    user: deploy
    hour: 9
    minute: 5
    weekday: "1-5"
    job: VERBOSE=true /srv/www/current/twfy/scripts/morningupdate
    state: "{{ openaustralia_cron_enabled | ternary('present', 'absent')}}"

# TODO: Do I need to make sure a MTA is installed for this to work?

# For development just make the output of cron get mailed to me
# TODO: Setup MAILTO to go to web-administrators@openaustralia.org and common slack channel for production
- cronvar:
    name: MAILTO
    user: deploy
    value: matthew@oaf.org.au

# For cross-domain redirects it would be good if we could do those at cloudflare.
# Otherwise, we should probably have a "redirect" role which handles cross-domain
# redirects for all domains

# TODO: Add data.openaustralia.org.au
# TODO: I have faint memory of rsync service for data.openaustralia.org.au
# TODO: Add redirects for software.openaustralia.org.au?
# TODO: Add backups for member images, xml files, cached downloads, register of member's interests
